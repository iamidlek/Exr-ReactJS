{"version":3,"sources":["api.ts","atoms.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","slice","isDarkAtom","atom","key","default","Chart","coinId","isDark","useRecoilValue","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","type","series","name","map","price","x","time_close","y","open","high","low","close","options","theme","mode","chart","height","background","foreColor","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","xaxis","yaxis","show","checkValue","value","comeupAnimation","keyframes","Container","styled","div","Overview","main","Tag","h3","Value","Text","props","isPositive","Price","tickersData","useState","setData","loading","setLoading","useEffect","quotes","USD","toFixed","market_cap_change_24h","percent_change_30m","percent_change_1h","percent_change_12h","percent_change_24h","Title","h1","accentColor","Main","textColor","Loader","span","Header","header","OverviewItem","Description","p","Tabs","Tab","isActive","Coin","useParams","state","useLocation","priceMatch","useMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","Helmet","to","rank","symbol","description","total_supply","max_supply","style","lineHeight","path","element","CoinsList","ul","li","bgColor","Img","img","Coins","setDarkAtom","useSetRecoilState","onClick","prev","coin","src","toLowerCase","pathname","id","Router","basename","process","darkTheme","cardBgColor","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","client","document","getElementById"],"mappings":"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","file":"static/js/main.38a6b75b.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`).then((response) =>\r\n    response.json().then((json) => json.slice(0, 50))\r\n  );\r\n}\r\n\r\nexport function fetchCoinInfo(coinId?: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinTickers(coinId?: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId?: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  return fetch(\r\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\r\n  ).then((response) => response.json());\r\n}\r\n","import { atom } from \"recoil\";\r\n\r\n// 사용시에는 isDarkAtom의 default값을 이용\r\nexport const isDarkAtom = atom({\r\n  key: \"isDark\",\r\n  default: true,\r\n});\r\n","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\n\r\ninterface IHistorical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\ninterface ChartProps {\r\n  coinId: string | undefined;\r\n}\r\n\r\nfunction Chart({ coinId }: ChartProps) {\r\n  const isDark = useRecoilValue(isDarkAtom);\r\n  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    // 고유한 이름 과 인수로 넣어줄 것\r\n    [\"ohlcv\", coinId],\r\n    () => fetchCoinHistory(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    }\r\n  );\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        \"Loading chart...\"\r\n      ) : (\r\n        <ApexChart\r\n          type=\"candlestick\"\r\n          series={[\r\n            {\r\n              name: \"Price\",\r\n              data: data?.map((price) => ({\r\n                x: price.time_close,\r\n                y: [price.open, price.high, price.low, price.close],\r\n              })),\r\n            },\r\n          ]}\r\n          options={{\r\n            theme: {\r\n              mode: isDark ? \"dark\" : \"light\",\r\n            },\r\n            chart: {\r\n              type: \"candlestick\",\r\n              height: 900,\r\n              background: \"transparent\",\r\n              foreColor: \"black\",\r\n              animations: {\r\n                enabled: true,\r\n                easing: \"easeinout\",\r\n                speed: 800,\r\n                animateGradually: {\r\n                  enabled: true,\r\n                  delay: 150,\r\n                },\r\n                dynamicAnimation: {\r\n                  enabled: true,\r\n                  speed: 350,\r\n                },\r\n              },\r\n            },\r\n            xaxis: {\r\n              type: \"datetime\",\r\n            },\r\n            yaxis: {\r\n              show: false,\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import { useEffect, useState } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nfunction checkValue(value: number | undefined) {\r\n  if (value) {\r\n    return value > 0;\r\n  }\r\n}\r\n\r\nconst comeupAnimation = keyframes`\r\n  0% {\r\n    transform: none;\r\n    opacity: 0;\r\n  }\r\n  1% {\r\n    transform: translateY(-5px);\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    transform: none;\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  main:first-child {\r\n    animation-delay: 0.2s;\r\n  }\r\n  main:nth-child(2) {\r\n    animation-delay: 0.4s;\r\n  }\r\n  main:nth-child(3) {\r\n    animation-delay: 0.6s;\r\n  }\r\n  main:nth-child(4) {\r\n    animation-delay: 0.8s;\r\n  }\r\n  main:nth-child(5) {\r\n    animation-delay: 1s;\r\n  }\r\n  main:last-child {\r\n    animation-delay: 1.2s;\r\n  }\r\n`;\r\n\r\nconst Overview = styled.main`\r\n  width: 100%;\r\n  height: 50px;\r\n  background-color: white;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 15px;\r\n  margin: 10px 0;\r\n  padding: 20px;\r\n  transform: translateY(-5px);\r\n  opacity: 0;\r\n  animation: ${comeupAnimation} 0.5s linear forwards;\r\n`;\r\n\r\nconst Tag = styled.h3`\r\n  width: 50%;\r\n  color: black;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Value = styled.div`\r\n  width: 50%;\r\n`;\r\n\r\nconst Text = styled.h3<{ isPositive?: Boolean }>`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: ${(props) => (props.isPositive ? \"lightgreen\" : \"red\")};\r\n`;\r\n\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\ninterface PriceProps {\r\n  coinId?: string;\r\n  tickersData?: PriceData;\r\n}\r\n\r\nfunction Price({ coinId, tickersData }: PriceProps) {\r\n  const [data, setData] = useState<PriceData>();\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    setData(tickersData);\r\n    setLoading(false);\r\n  }, [coinId, tickersData]);\r\n  return (\r\n    <Container>\r\n      {loading ? (\r\n        \"Loading Price...\"\r\n      ) : (\r\n        <>\r\n          <Overview>\r\n            <Tag>Price :</Tag>\r\n            <Value>\r\n              <Text isPositive={true}>\r\n                $ {data?.quotes.USD.price.toFixed(3)}\r\n              </Text>\r\n            </Value>\r\n          </Overview>\r\n          <Overview>\r\n            <Tag> Max Change rate in last 24h:</Tag>\r\n            <Value>\r\n              <Text\r\n                isPositive={\r\n                  checkValue(data?.quotes.USD.market_cap_change_24h) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.market_cap_change_24h} %\r\n              </Text>\r\n            </Value>\r\n          </Overview>\r\n\r\n          <Overview>\r\n            <Tag> Change rate (last 30 Minutes):</Tag>\r\n            <Value>\r\n              <Text\r\n                isPositive={\r\n                  checkValue(data?.quotes.USD.percent_change_30m) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_30m} %\r\n              </Text>\r\n            </Value>\r\n          </Overview>\r\n\r\n          <Overview>\r\n            <Tag> Change rate (last 1 hours):</Tag>\r\n            <Value>\r\n              <Text\r\n                isPositive={\r\n                  checkValue(data?.quotes.USD.percent_change_1h) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_1h} %\r\n              </Text>\r\n            </Value>\r\n          </Overview>\r\n\r\n          <Overview>\r\n            <Tag> Change rate (last 12 hours):</Tag>\r\n            <Value>\r\n              <Text\r\n                isPositive={\r\n                  checkValue(data?.quotes.USD.percent_change_12h) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_12h} %\r\n              </Text>\r\n            </Value>\r\n          </Overview>\r\n\r\n          <Overview>\r\n            <Tag> Change rate (last 24 hours):</Tag>\r\n            <Value>\r\n              <Text\r\n                isPositive={\r\n                  checkValue(data?.quotes.USD.percent_change_24h) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_24h} %\r\n              </Text>\r\n            </Value>\r\n          </Overview>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Price;\r\n","import { Routes, Route, useLocation, useParams, useMatch } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Main = styled.div`\r\n  font-size: 18px;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  color: ${(props) => props.theme.textColor};\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 33%;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\nconst Description = styled.p`\r\n  margin: 20px 0px;\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  border-radius: 10px;\r\n  color: ${(props) =>\r\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\n// state로 받아온 name을 정의하는 방법\r\ninterface nameState {\r\n  name: string;\r\n}\r\n\r\ninterface RouteState {\r\n  state: nameState;\r\n}\r\n\r\n// Command(Ctrl)+D: 같은 문자열 선택\r\n// Shift+Alt+i: 선택한 모든 문자열에 가장 우측 끝으로 포커싱\r\n// Command(Ctrl)+Shift+오른쪽 화살표: 현재 선택한 문자열을 기준으로 우측 끝까지 문자열 선택\r\n\r\ninterface InfoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n  description: string;\r\n  message: string;\r\n  open_source: boolean;\r\n  started_at: string;\r\n  development_status: string;\r\n  hardware_wallet: boolean;\r\n  proof_type: string;\r\n  org_structure: string;\r\n  hash_algorithm: string;\r\n  first_data_at: string;\r\n  last_data_at: string;\r\n}\r\n\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\nfunction Coin() {\r\n  // useParams에 자동적으로 stirng | undefied설정됨\r\n  const { coinId } = useParams<{ coinId: string }>();\r\n\r\n  // 부모에서 state로 넘긴 데이터들을 이용\r\n  const { state } = useLocation() as RouteState;\r\n\r\n  // 현재 url 정보들이 담긴 객체\r\n  // 매치가 안될경우 null 이 반환된다\r\n  const priceMatch = useMatch(\"/:coinId/price\");\r\n  const chartMatch = useMatch(\"/:coinId/chart\");\r\n\r\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\r\n    [\"info\", coinId],\r\n    () => fetchCoinInfo(coinId)\r\n  );\r\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\r\n    [\"tickers\", coinId],\r\n    () => fetchCoinTickers(coinId),\r\n    {\r\n      refetchInterval: 5000,\r\n    }\r\n  );\r\n  const loading = infoLoading || tickersLoading;\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </Title>\r\n        <Main>\r\n          <Link to=\"/\">Main Page</Link>\r\n        </Main>\r\n      </Header>\r\n      {loading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Rank:</span>\r\n              <span>{infoData?.rank}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Symbol:</span>\r\n              <span>${infoData?.symbol}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Price:</span>\r\n              <span>${tickersData?.quotes.USD.price.toFixed(3)}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n          <Description>{infoData?.description}</Description>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Total Suply:</span>\r\n              <span>{tickersData?.total_supply}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Max Supply:</span>\r\n              <span>{tickersData?.max_supply}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n          <Tabs style={{ height: \"30px\", lineHeight: \"30px\" }}>\r\n            <Tab isActive={chartMatch !== null}>\r\n              <Link to={`/${coinId}/chart`}>Chart</Link>\r\n            </Tab>\r\n            <Tab isActive={priceMatch !== null}>\r\n              <Link to={`/${coinId}/price`}>Price</Link>\r\n            </Tab>\r\n          </Tabs>\r\n          <Routes>\r\n            <Route\r\n              path=\"price\"\r\n              element={<Price coinId={coinId} tickersData={tickersData} />}\r\n            />\r\n            <Route path=\"chart\" element={<Chart coinId={coinId} />} />\r\n          </Routes>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coin;\r\n","import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoins } from \"../api\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst CoinsList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n  background-color: white;\r\n  color: ${(props) => props.theme.bgColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  a {\r\n    padding: 20px 0;\r\n    transition: color 0.2s ease-in;\r\n    display: block;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  margin-right: 10px;\r\n`;\r\n\r\ninterface ICoin {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n}\r\n\r\nfunction Coins() {\r\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\r\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\r\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>코인</title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>코인</Title>\r\n        <button onClick={toggleDarkAtom}>Toggle Mode</button>\r\n      </Header>\r\n      {isLoading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <CoinsList>\r\n          {data?.map((coin) => (\r\n            <Coin key={coin.id}>\r\n              <Img\r\n                src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\r\n              />\r\n              {/* chart 가 바로 보여지도록 해도 coin컴포넌트에 내용 전달 가능 */}\r\n              <Link\r\n                to={{\r\n                  pathname: `/${coin.id}/chart`,\r\n                }}\r\n                // state로 데이터 그 자체를 보내줌\r\n                state={{ name: coin.name, rank: coin.rank }}\r\n              >\r\n                {coin.name} &rarr;\r\n              </Link>\r\n            </Coin>\r\n          ))}\r\n        </CoinsList>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coins;\r\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Routes>\r\n        {/* /:coinId 뒤에 /* 는 중첩을 위함 */}\r\n        <Route path=\"/:coinId/*\" element={<Coin />} />\r\n        <Route path=\"/\" element={<Coins />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default Router;\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\n// styled.d.ts 에서 확장한 값들을 설정\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"transparent\",\r\n};\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  bgColor: \"whitesmoke\",\r\n  textColor: \"black\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"white\",\r\n};\r\n\r\n// export const lightTheme: DefaultTheme = {\r\n//   bgColor: \"white\",\r\n//   textColor: \"black\",\r\n//   btnColor: \"tomato\",\r\n// };\r\n\r\n// export const darkTheme: DefaultTheme = {\r\n//   bgColor: \"black\",\r\n//   textColor: \"white\",\r\n//   btnColor: \"teal\",\r\n// };\r\n\r\n// 사용시\r\n// provider로 감싼 영역 안에서는 theme로 받아서 사용 가능\r\n\r\n// const sample = styled.div`\r\n//   background-color: ${props=> props.theme.bgColor}\r\n// `\r\n","// import StyledComponents from \"./studys/StyledComponents.js\";\n// import TypeingTheProps from \"./studys/TypeingTheProps\";\nimport Router from \"./Router\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor}\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\nfunction App() {\n  // 토글을 위한 상태가 한 줄로 글로벌 관리 가능\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      {/* <StyledComponents /> */}\n      {/* <TypeingTheProps bgColor=\"red\" /> */}\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <RecoilRoot>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </RecoilRoot>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}